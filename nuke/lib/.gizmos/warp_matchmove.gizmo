#! C:/Program Files/Nuke8.0v5/nuke-8.0.v5.dll -nx
version 8.0 v5
Group {
 name StickIt4
 tile_color 0x2f66ff
 selected true
 xpos 316
 ypos 161
 addUserKnob {20 Main l "Main - StickIt"}
 addUserKnob {26 Headline l "" +STARTLINE T "<font color=#9090EE size=\"7\">S</font><font color=#8080DD size=\"7\">T</font><font color=#7070CC size=\"7\">i</font><font color=#6060BB size=\"7\">C</font><font color=#5050AA size=\"7\">K</font><font color=#6060BB size=\"7\">i</font><font color=#7070CC size=\"7\">T</font><font color=#8080DD size=\"3\">v</font><font color=#9090EE size=\"2\">1.0</font>"}
 addUserKnob {26 HeadlineB l "" +STARTLINE T "<font color=#9090EE size=\"2\">warp matchmove tools</font>"}
 addUserKnob {26 range_devider l "<b><font color=\"lightgreen\">Input</font><b>"}
 addUserKnob {3 RefrenceFrameInput l "Reference Frame"}
 RefrenceFrameInput 2
 addUserKnob {3 InputFrom l "Range From"}
 InputFrom 1
 addUserKnob {3 InputTo l To -STARTLINE}
 InputTo 100
 addUserKnob {22 Button_SetToGlobal l "Set To Global" -STARTLINE T "nuke.thisNode().knob(\"InputFrom\").setValue(float(nuke.knob(\"first_frame\")))\nnuke.thisNode().knob(\"InputTo\").setValue(float(nuke.knob(\"last_frame\")))"}
 addUserKnob {26 Devider_Options l "<b><font color=#70EE70>Options</font><b>"}
 addUserKnob {4 SolveMethod l "Solve Method" M {Triangulation Nearest}}
 addUserKnob {4 ApplyMethod l "Apply Method" M {"Match Move" Stabilize ""}}
 addUserKnob {4 FilterMethod l "Filter Method" M {Impulse "Cubic " Keys Simon Rifman Mitchell Parzen Notch Lanczos4 Lanczos6 Sinc4}}
 addUserKnob {6 enableMotionBlur l "Enable Motion Blur" +STARTLINE}
 addUserKnob {26 DeviderView l "<b><font color=#70EE70>Display</font><b>"}
 addUserKnob {6 HideSource l "Hide Source" +STARTLINE}
 addUserKnob {41 previewFeatures l "Preview Features" T si_ct.previewFeatures}
 addUserKnob {41 displayTracks l "Show Features" T si_ct.displayTracks}
 addUserKnob {6 DisableWarp l "Disable Warp" +STARTLINE}
 addUserKnob {26 devider_solve l "<b><font color=#70EE70>Analyse</font><b>"}
 addUserKnob {22 RunAnalyse l Analyse T "nuke.toNode(\"si_ct\").knob(\"clearTrack\").execute()\n\nnuke.toNode(\"si_ct\").knob(\"trackFeatures\").execute()\n\n\n\n" +STARTLINE}
 addUserKnob {26 next l "" -STARTLINE T "-> "}
 addUserKnob {22 STiCKiT l Solve -STARTLINE T "taskB = nuke.ProgressTask('Calculating Solve, please wait...') \n\n\nimport string #This is used by the code. Include!\nimport math\nimport struct\n'''\n#Todo:\n-Get all points from the CameraTracker and put them into a list\n-Create a initial set of points, this could be all points on a certain frame or a general set of points.\n  If we take from a certain frame we need to get a list of all points that are on the specified frame\n-For every source object we put in a single value that is the XY pos of the object in the specified frame\n\n-For every target object we triangulate the nearby points and get a new position, we do that for all the frames in the framerange specified.\n-For every target object we bake animation calculated in the step above\n\n\nRemember that we must save the new calculated position into a new list or modify the exsisting to get perfect results\n'''\n'''================================================================================\n; Function:          CreateWarpPinPair(myNode):\n; Description:       Create a Splinewarp pin pair.\n; Parameter(s):      node - The node create pin in\n; Return(s):         Returns a pair of pin objects (_curveknob.Stroke objects) \[source,target]\n;                    specified - Only take knobs with this tag (like \"UserTrack\" from a cameratracker)\n; Note(s):            N/A\n;=================================================================================='''\ndef CreateWarpPinPair(myNode,pointlist,refframe):\n  lutsKnob = myNode.knob(\"curves\")\n  #print \"--CreateWarpPair--\"\n  #print pointlist\n  #ItemX = \[1,2,3,4,5,6]\n  ItemX = pointlist\n\n  #Ok, this is messy but is added for Nuke 6, 7 support.\n  #We cunstruct the pins with a basic FromScript method.\n  Header = \"\"\"AddMode 0 0 1 0 \{\{v x3f99999a\}\n    \{f 0\}\n    \{n\n     \{layer OverTheSticky\n      \{f 0\}\n      \{t x44800000 x44428000\}\n      \{a\}\n  \"\"\"\n  Content = \"\"\"            \{cubiccurve Pin1 262656 bezier\n     \{cc\n      \{f 8224\}\n      \{px 1\n       \{0 0\}\n       \{x43d20000 x43e60000\}\n       \{0 0\}\}\}\n     \{tx 1 x43d20000 x43e60000\}\n     \{a ro 0 go 0 bo 0 ao 0 mbo 0 mb 1 mbs x3f000000 mbsot 0 mbso 0 fo 1 fx 0 fy 0 ff 1 ft 0 str 1 pt 0 ab 1\}\}\n  \"\"\"\n  Footer = \"\"\"  \{edge Pin2222 Pin1111\n   \{cp 0 0 0 0 0\n    \{\{\{\{1 x3f000000\}\}\n     \{\{1 x3f000000\}\}\}\n     \{\{\{1 x3f000000\}\}\n     \{\{1 x3f000000\}\}\}\n     \{\{\{1 x3f000000\}\}\n     \{\{1 x3f000000\}\}\}\n     \{\{\{1 x3f000000\}\}\n     \{\{1 x3f000000\}\}\}\}\}\n   \{a\}\}\n  \"\"\"\n  MessageC = \"\"\n  MessageF = \"\"\n  Message = Header\n\n\n  for i in range(0, len(ItemX)):\n\n\n      convertedX = float_to_hex(float(pointlist\[i]\[int(refframe-float(pointlist\[i]\[0]\[0]))]\[1]))\n      ConvertedY = float_to_hex(float(pointlist\[i]\[int(refframe-float(pointlist\[i]\[0]\[0]))]\[2]))\n\n\n      Pre_Message = Content.replace(\"Pin1\", \"Pin\"+str(i*2+1))\n      Pre_Message = Pre_Message.replace(\"x43d20000 x43e60000\", \"x\"+convertedX+\" x\"+ConvertedY)\n\n      #Pre_Message = Pre_Message.replace(\"parent.CameraTracker1.UserTrack0\", \"parent.\"+SelectedNode.name() + \".UserTrack\" + str(i)+\"(\"+ItemFrameStart\[i]\[:-2]+\")\")\n      MessageC = Pre_Message + MessageC\n\n      Pre_Message = Content.replace(\"Pin1\", \"Pin\"+str(i*2+2))\n      Pre_Message = Pre_Message.replace(\"x43d20000 x43e60000\",  \"x\"+convertedX+\" x\"+ConvertedY)\n      #Pre_Message = Pre_Message.replace(\"parent.CameraTracker1.UserTrack0\", \"parent.\"+SelectedNode.name() + \".UserTrack\" + str(i))\n      MessageC = Pre_Message + MessageC\n  MessageC, result = MessageC\[:-1], MessageC\[-1]\n  Message = Message + MessageC\n  Message = Message + \"\"\"\}\}\n  \"\"\"\n  for i in range(0, len(ItemX)):\n      Pre_Message = Footer.replace(\"Pin1111\", \"Pin\"+str(i*2+1))\n      Pre_Message = Pre_Message.replace(\"Pin2222\", \"Pin\"+str(i*2+2))\n      MessageF = Pre_Message + MessageF\n\n  MessageF, result = MessageF\[:-1], MessageF\[-1]\n  Message = Message + MessageF\n  Message = Message + \"\"\"\}\n  \"\"\"\n\n\n  #print Message\n  lutsKnob.fromScript(Message)\n\n  #print pointlist\[0]\n  for i in range(0, len(ItemX)):\n    PinTarget = lutsKnob.toElement(\"Pin\"+str(i*2+1))\n    PinSource = lutsKnob.toElement(\"Pin\"+str(i*2+2))\n    PinSource.getTransform().getTranslationAnimCurve(0).removeAllKeys()\n    PinSource.getTransform().getTranslationAnimCurve(1).removeAllKeys()\n    PinTarget.getTransform().getTranslationAnimCurve(0).removeAllKeys()\n    PinTarget.getTransform().getTranslationAnimCurve(1).removeAllKeys()\n    PinSource.getTransform().addTranslationKey(refframe,0,0,100.0)\n    for ix in range(0, len(pointlist\[i])):\n\n      PinTarget.getTransform().getTranslationAnimCurve(0).addKey(pointlist\[i]\[ix]\[0],float(pointlist\[i]\[ix]\[1])-float(pointlist\[i]\[int(refframe-float(pointlist\[i]\[0]\[0]))]\[1]))\n      PinTarget.getTransform().getTranslationAnimCurve(1).addKey(pointlist\[i]\[ix]\[0],float(pointlist\[i]\[ix]\[2])-float(pointlist\[i]\[int(refframe-float(pointlist\[i]\[0]\[0]))]\[2]))\n      #print pointlist\[i]\[ix]\[0]\n      #print float(pointlist\[i]\[ix]\[0]),float(pointlist\[i]\[ix]\[1]),float(pointlist\[i]\[ix]\[2]),1.0\n    #print \"end\"\n\n\n\n'''================================================================================\n; Function:             float_to_hex(float):\n; Description:          Converts a float to a hex decimal\n;=================================================================================='''\ndef float_to_hex(f):\n    return hex(struct.unpack('<I', struct.pack('<f', f))\[0])\n\n'''================================================================================\n; Function:             ExportCameraTrack(myNode):\n; Description:          Extracts all 2D Tracking Featrures from a 3D CameraTracker node (not usertracks).\n; Parameter(s):         myNode - A CameraTracker node containing tracking features\n; Return:               Output - A list of points formated \[ \[\[Frame,X,Y]\[...]] \[\[...]\[...]] ]\n;                           \n; Note(s):              N/A\n;=================================================================================='''\ndef ExportCameraTrack(myNode):\n    myKnob = myNode.knob(\"serializeKnob\")\n    myLines = myKnob.toScript()    \n    DataItems = string.split(myLines, '\\n')\n    Output = \[]\n    for index,line in enumerate(DataItems):\n        tempSplit = string.split(line, ' ')\n        if (len(tempSplit) > 4 and tempSplit\[ len(tempSplit)-1] == \"10\") or (len(tempSplit) > 6 and  tempSplit\[len(tempSplit)-1] == \"10\"): #Header\n            #The first object always have 2 unknown ints, lets just fix it the easy way by offsetting by 2\n            if len(tempSplit) > 6 and  tempSplit\[6] == \"10\":\n                offsetKey = 2\n                offsetItem = 0\n            else:\n                offsetKey = 0\n                offsetItem = 0\n            #For some wierd reason the header is located at the first index after the first item. So we go one step down and look for the header data.\n            itemHeader = string.split(myLines, '\\n')\[index+1]\n            itemHeadersplit = string.split(itemHeader, ' ')\n            itemHeader_UniqueID = itemHeadersplit\[1]\n\n            #So this one is rather wierd but after a certain ammount of items the structure will change again.\n            firstOffset = 0\n            secondOffset = 0\n            secondItem = string.split(myLines, '\\n')\[index+2]\n            secondSplit = string.split(secondItem, ' ')\n            if len(secondSplit) == 7:\n                 firstOffset = 0\n\n            if len(itemHeadersplit) == 3:\n                itemHeader = string.split(myLines, '\\n')\[index+2]\n                itemHeadersplit = string.split(itemHeader, ' ')\n                offsetKey = 2\n                offsetItem = 2\n                #print \"LOOOOL\" + str(\[int(LastFrame)+(0),string.split(DataItems\[index+0], ' ')\[2]  ,string.split(DataItems\[index+0], ' ')\[3]])\n                #print secondSplit\n                #print len(secondSplit)\n                if len(secondSplit) == 11:\n                  firstOffset = 1 #In this case the 2nd item will be +1                \n                elif len(secondSplit) == 7:\n                  firstOffset = 1\n                else:\n                  firstOffset = 0 #In this case the 2nd item will be +0\n\n\n            itemHeader_FirstItem = itemHeadersplit\[3+offsetItem]\n            itemHeader_NumberOfKeys = itemHeadersplit\[4+offsetKey]\n            #Here we extract the individual XY coordinates\n            PositionList =\[]\n            PositionList.append(\[int(LastFrame)+(0),string.split(DataItems\[index+0], ' ')\[2]  ,string.split(DataItems\[index+0], ' ')\[3]])\n            for x in range(2,int(itemHeader_NumberOfKeys)):\n                if len(string.split(DataItems\[index+x+firstOffset-1], ' '))>7 and len(string.split(DataItems\[index+x+firstOffset-1], ' '))<10 and int(string.split(DataItems\[index+x+firstOffset-1], ' ')\[5]) > 0:\n                  #print \"SHIT!!! VIRUZ!!!\"\n                  #print string.split(DataItems\[index+x+firstOffset-1], ' ')\n                  #print string.split(DataItems\[index+1+firstOffset], ' ')\n                  Offset = int(string.split(DataItems\[index+x+firstOffset-1], ' ')\[7])\n                  #print Offset\n                  #print DataItems\[Offset+1]\n                  PositionList.append(\[int(LastFrame)+(x-1),string.split(DataItems\[Offset+1], ' ')\[2]  ,string.split(DataItems\[Offset+1], ' ')\[3]]) \n                  #print PositionList\n                  secondOffset = 1\n                else:\n                  PositionList.append(\[int(LastFrame)+(x-1),string.split(DataItems\[index+x+firstOffset-secondOffset], ' ')\[2]  ,string.split(DataItems\[index+x+firstOffset-secondOffset], ' ')\[3]])         \n                  #print str(LastFrame) , str(x), str(index), \"This was data\"         \n            Output.append(PositionList)\n            #print PositionList\n        elif (len(tempSplit) > 8 and tempSplit\[1] == \"0\" and tempSplit\[2] == \"1\"):\n            LastFrame = tempSplit\[3]\n        else:  #Content\n            pass\n    return Output\n\n'''================================================================================\n; Function:             GetAnimtionList(myList,myFrame):\n; Description:          Returns a list of points that contain animation between myFrame and the following frame\n; Parameter(s):         myList - A list of points formated \[ \[\[Frame,X,Y]\[...]] \[\[...]\[...]] ]\n                        myFrame - The frame to take into consideration \n; Return:               Output - A list of points formated \[ \[\[Frame,X,Y]\[...]] \[\[...]\[...]] ]\n;                           \n; Note(s):              N/A\n;=================================================================================='''\ndef GetAnimtionList(myList,nestedPoints,myFrame):   \n\n    thisFrame = int(myFrame)\n    nextFrame = int(myFrame) + 1\n    Output = \[]\n    #print item_dict\[thisFrame]\n    #print dwqdwq\n    for i,item in enumerate(item_dict\[thisFrame]):\n        if item_dict\[thisFrame]\[i]\[4]>thisFrame: \n            #Output.append(\[item_dict\[thisFrame]\[i-1],item_dict\[thisFrame]\[i]])\n            #print item_dict\[thisFrame]\[i-1]\n            #print item_dict\[thisFrame]\[i]\n            #print \[(thisFrame-item_dict\[thisFrame]\[i]\[3])]\n            outThisframe = myList\[item_dict\[thisFrame]\[i]\[2]]\[(thisFrame-item_dict\[thisFrame]\[i]\[3])]\n            #print myList\[item_dict\[thisFrame]\[i]\[2]]\[(thisFrame-item_dict\[thisFrame]\[i]\[3])+1]\n            #print myList\[item_dict\[thisFrame]\[i]\[2]]\n            #print \[(thisFrame-item_dict\[thisFrame]\[i]\[3])+1]\n            outNextframe =  myList\[item_dict\[thisFrame]\[i]\[2]]\[(thisFrame-item_dict\[thisFrame]\[i]\[3])+1]\n\n            Output.append(\[outThisframe,outNextframe])\n    return Output\n\n\n\ndef GetNearestPoints(refpoint,pointList):\n  #Distance Calculation\n  x1 = float(refpoint\[1])\n  y1 = float(refpoint\[2])\n  distancelist = \[]\n  if len(pointList) < 3:\n    print \"ERROR, LESS THAN 3 POINTS FOR REFRENCE. GET A BETTER TRACK! \" + str(len(pointList))\n  for item in pointList: #Does it read from the same frame or a new one?\n    #print item\n    x2 = float(item\[0]\[1])\n    y2 = float(item\[0]\[2])\n    dist = math.hypot(x2-x1, y2-y1)\n    dist = dist+1\n    distancelist.append(dist)\n\n\n\n  sorted_lookup = sorted(enumerate(distancelist), key=lambda i:i\[1])\n\n  index0 = sorted_lookup\[0]\[0]\n  index1 = sorted_lookup\[1]\[0]\n  index2 = sorted_lookup\[2]\[0]\n\n  perc0 = 1 / (sorted_lookup\[0]\[1])\n  perc1 = 1 / (sorted_lookup\[1]\[1])\n  perc2 = 1 / (sorted_lookup\[2]\[1])\n\n  if perc0 == 1:\n    perc1 = 0\n    perc2 = 0\n  perctotal = perc0+perc1+perc2\n\n  Percent0 = perc0 if perctotal == 0 else perc0 / (perctotal)\n  Percent1 = perc1 if perctotal == 0 else perc1 / (perctotal)\n  Percent2 = perc2 if perctotal == 0 else perc2 / (perctotal)\n  x02 = float(pointList\[index0]\[1]\[1])\n  y02 = float(pointList\[index0]\[1]\[2])\n  x12 = float(pointList\[index1]\[1]\[1])\n  y12 = float(pointList\[index1]\[1]\[2])\n  x22 = float(pointList\[index2]\[1]\[1])\n  y22 = float(pointList\[index2]\[1]\[2])\n  x01 = float(pointList\[index0]\[0]\[1])\n  y01 = float(pointList\[index0]\[0]\[2])\n  x11 = float(pointList\[index1]\[0]\[1])\n  y11 = float(pointList\[index1]\[0]\[2])\n  x21 = float(pointList\[index2]\[0]\[1])\n  y21 = float(pointList\[index2]\[0]\[2])\n  xOffset = (((x02-x01) * Percent0) + (( x12-x11) * Percent1) + (( x22-x21) * Percent2))\n  yOffset = (((y02-y01) * Percent0) + (( y12-y11) * Percent1) + ((y22-y21) * Percent2))\n  return \[xOffset, yOffset]\n\n\n\n'''\ndef GetNearestPoints(refpoint,pointList):\n    global tsd\n    #print \"--GetNearestPoint--\"\n    #print pointList\n    #Distance Calculation\n    x1 = float(refpoint\[1])\n    y1 = float(refpoint\[2])\n    distancelist = \[]\n    if len(pointList) < 3:\n      print \"ERROR, LESS THAN 3 POINTS FOR REFRENCE. GET A BETTER TRACK! \" + str(len(pointList))\n    for item in pointList: #Does it read from the same frame or a new one?\n        #print item\n        x2 = float(item\[0]\[1])\n        y2 = float(item\[0]\[2])\n        dist = math.hypot(x2-x1, y2-y1)\n        distancelist.append(dist)\n\n\n    #print distancelist\n    sorted_lookup = sorted(enumerate(distancelist), key=lambda i:i\[1])\n    index0 = sorted_lookup\[0]\[0]\n    index1 = sorted_lookup\[1]\[0]\n    index2 = sorted_lookup\[2]\[0]\n    #print sorted_lookup\n    perc0 = 1 / (sorted_lookup\[0]\[1]+tsd)\n    perc1 = 1 / (sorted_lookup\[1]\[1]+tsd)\n    perc2 = 1 / (sorted_lookup\[2]\[1]+tsd)\n    perctotal = perc0+perc1+perc2\n    Percent0 = perc0 / (perctotal+tsd)\n    Percent1 = perc1 / (perctotal+tsd)\n    Percent2 = perc2 / (perctotal+tsd)\n    x02 = float(pointList\[index0]\[1]\[1])\n    y02 = float(pointList\[index0]\[1]\[2])\n    x12 = float(pointList\[index1]\[1]\[1])\n    y12 = float(pointList\[index1]\[1]\[2])\n    x22 = float(pointList\[index2]\[1]\[1])\n    y22 = float(pointList\[index2]\[1]\[2])\n    x01 = float(pointList\[index0]\[0]\[1])\n    y01 = float(pointList\[index0]\[0]\[2])\n    x11 = float(pointList\[index1]\[0]\[1])\n    y11 = float(pointList\[index1]\[0]\[2])\n    x21 = float(pointList\[index2]\[0]\[1])\n    y21 = float(pointList\[index2]\[0]\[2])\n    #print \"--\"\n    #print pointList\[0]\n    #print \"refpoint\"\n\n    #print x02,y02\n    #print x01,y01\n    #xOffset = (((x02-x1) * Percent0) + (( x12-x1) * Percent1) + (( x22-x1) * Percent2))\n    #yOffset = (((y02-y1) * Percent0) + (( y12-y1) * Percent1) + ((y22-y1) * Percent2))\n\n    xOffset = (((x02-x01) * Percent0) + (( x12-x11) * Percent1) + (( x22-x21) * Percent2))\n    yOffset = (((y02-y01) * Percent0) + (( y12-y11) * Percent1) + ((y22-y21) * Percent2))\n    #print \[xOffset, yOffset]\n    return \[xOffset, yOffset]\n'''\n\n\n#Example 01:\n#This code will extract all tracks from the camera tracker and display the first item.\n\nimport time\n\n#Define Variables\ndebug = 1\nframeForRef = int(nuke.thisNode().knob(\"RefrenceFrameInput\").value())\nStartFrame = int(nuke.thisNode().knob(\"InputFrom\").value())\nEndFrame = int(nuke.thisNode().knob(\"InputTo\").value())\n\nif debug:\n    #Node = nuke.selectedNode()\n    Node = nuke.toNode(\"si_ct\") #change this to your tracker node!\n    NodePin = nuke.toNode(\"si_sw\") #change this to your tracker node!\nelse:\n    Node = nuke.thisNode()\n\n\n#Constants etc.\nRetrun = \[]\ntsd = 0.0000000001 #temp safe devider, me lazy.\nRefPointList = \[\[10.1,10.4],\[0,0]] #temp, delete\n\n\n#01: Get all points from the cameratracker node.\nReturn = ExportCameraTrack(Node)\n#print Return\n#02: To optimize the lookups we index all the data into frame lists containing \[x,y,index,firstframe,lastframe]\n#     this will give a 40+ times performence boost.\nitem_dict = \{\}\nfor list_index, big_lst in enumerate(Return):\n    for lst in big_lst:\n        #print lst\[1:]\n        if lst\[0] in item_dict:\n            item_dict\[lst\[0]] += \[lst\[1:]+\[list_index]+\[Return\[list_index]\[0]\[0], Return\[list_index]\[len(Return\[list_index])-1]\[0]],] # Append\n        else:\n            item_dict\[lst\[0]] = \[lst\[1:]+\[list_index]+\[Return\[list_index]\[0]\[0], Return\[list_index]\[len(Return\[list_index])-1]\[0]],] # Initialize\n\n\n#03: Get a set of reference points. This is the points we want to move.\nRefPointList = GetAnimtionList(Return,item_dict,StartFrame)\n#04: Go through all of the frames and triangulate best points to move the refpoints with.\nstart = time.clock()\nfinalAnimation = \[]\n\n\nprint \"--Initializing Main Loop--\"\n\nfor item in RefPointList:\n  tempAnimation = \[]\n  #print item\n  tempAnimation.append(\[StartFrame,float(item\[0]\[1]),float(item\[0]\[2])])\n  for frame in range(StartFrame,EndFrame):\n\n      newOffset = GetNearestPoints(item\[0],GetAnimtionList(Return,item_dict,frame))\n      tempAnimation.append(\[frame+1,float(item\[0]\[1])+newOffset\[0],float(item\[0]\[2])+newOffset\[1]])\n      item\[0]\[1] = float(item\[0]\[1])+newOffset\[0]\n      item\[0]\[2] = float(item\[0]\[2])+newOffset\[1]\n      #print GetAnimtionList(Return,item_dict,frame)\n      #print str(frame),\" - \", str(item), \" - \", newOffset\n  #print tempAnimation\n  finalAnimation.append(tempAnimation)\nprint \"end\"\n#print finalAnimation\nend = time.clock()\nprint \"%.2gs\" % (end-start)\n\n\nCreateWarpPinPair(NodePin,finalAnimation,frameForRef)\ndel(taskB)"}
 addUserKnob {26 ""}
 addUserKnob {20 Help n 1}
 Help 0
 addUserKnob {26 Info l "" +STARTLINE T "STiCKiT v1.0\n\nPlace the footage that you want to match the motion of into the \[Source] input and hit Analyse.\n\n-Input\n Reference Frame\n     The frame from which you want to apply the operation\n Range\n     The range of frames you want to Analyse\n-Options\n Solve Method\n     The method for solving\n         Triangulation - Use a distance based average of the 3 nearest points\n         Nearest - Single point  \n Apply Method\n     Choose between a match move or warp stabelize\n Filter Method\n     The interpolation method for the warp\n-Analyse"}
 addUserKnob {20 Advanced}
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 Devider_Tracking l "<b><font color=#70EE70>Tracking</font><b>"}
 addUserKnob {41 numberFeatures l "Number of Features" T si_ct.numberFeatures}
 addUserKnob {41 featureThreshold l "Detection Threshold" T si_ct.featureThreshold}
 addUserKnob {41 minTrackLength l "Minimum Length" T si_ct.minTrackLength}
 addUserKnob {41 matchThreshold l "Track Threshold" T si_ct.matchThreshold}
 addUserKnob {41 smoothnessThreshold l "Track Smoothness" T si_ct.smoothnessThreshold}
 addUserKnob {41 consistencyThreshold l "Track Consistency" T si_ct.consistencyThreshold}
 addUserKnob {26 devider_debug l "<b><font color=#70EE70>Other Options</font><b>"}
 addUserKnob {6 displayMotion l "Output Motion Vectors" +STARTLINE}
 displayMotion true
 addUserKnob {6 displayDiffrence l "Output Diffrence Map" +STARTLINE}
 displayDiffrence true
 addUserKnob {6 disableprecrop l "Disable PreCrop" +STARTLINE}
 disableprecrop true
 addUserKnob {26 info l "" +STARTLINE T "Use Diable PreCrop if your overlay footage is being cropped off. \nHowever enable it again if you want to copy / paste the node or \notherwise unplug the overlay input. Due to a bug in nuke all \nkeyframes will be removed if this is not turned on."}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x4f4f4fff
  note_font_size 42
  xpos -3743
  ypos -1955
  bdwidth 8808
  bdheight 5151
 }
 Input {
  inputs 0
  name InputOverlay
  tile_color 0xff
  selected true
  xpos 776
  ypos 131
  number 1
 }
 Crop {
  box {0 0 1920 1080}
  name si_prec
  tile_color 0xff
  selected true
  xpos 776
  ypos 155
  disable {{parent.disableprecrop}}
 }
 Dot {
  name Dot2
  tile_color 0xff
  selected true
  xpos 810
  ypos 188
 }
set N159d7930 [stack 0]
 Dot {
  name Dot3
  tile_color 0xff
  selected true
  xpos 937
  ypos 188
 }
add_layer {si_mo si_mo.red si_mo.green}
 Expression {
  channel0 {si_mo.red -si_mo.green}
  expr0 x
  channel1 {-si_mo.red si_mo.green}
  expr1 y
  expr2 0
  name si_stgen
  tile_color 0xff
  selected true
  xpos 903
  ypos 219
 }
set N159d8010 [stack 0]
 Dot {
  name Dot4
  tile_color 0xff
  selected true
  xpos 937
  ypos 498
 }
push $N159d8010
push $N159d7930
 ShuffleCopy {
  inputs 2
  in si_mo
  alpha alpha2
  black red
  white green
  out2 si_mo
  name si_sh
  tile_color 0xff
  selected true
  xpos 776
  ypos 219
 }
 SplineWarp3 {
  crop_to_format false
  colorOverlay {0 0 0 0}
  view {}
  curves {{{v x3f99999a}
  {f 0}
  {n
   {layer OverTheSticky
    {f 512}
    {t x44800000 x44428000}
    {a}}}}}
  toolbar_autokey false
  toolbar_preview_mode "persistent preview"
  filter {{parent.FilterMethod}}
  name si_sw
  tile_color 0xff
  selected true
  xpos 776
  ypos 263
  disable {{parent.DisableWarp}}
 }
set N159d8a60 [stack 0]
 Dot {
  name Dot5
  tile_color 0xff
  selected true
  xpos 810
  ypos 318
 }
set N159d8dd0 [stack 0]
 Dot {
  name Dot7
  tile_color 0xff
  selected true
  xpos 810
  ypos 361
 }
set N159d9140 [stack 0]
 Merge2 {
  inputs 2
  operation minus
  Achannels si_mo
  Bchannels si_mo
  output si_mo
  name si_calcdif
  tile_color 0xff
  selected true
  xpos 776
  ypos 489
  disable true
 }
push $N159d8a60
add_layer {si_trans si_trans.red si_trans.green si_trans.blue si_trans.alpha}
 Expression {
  channel0 {si_trans.red -si_trans.green -si_trans.blue -si_trans.alpha}
  expr0 si_mo.red/(width-1)
  channel1 {-si_trans.red si_trans.green -si_trans.blue -si_trans.alpha}
  expr1 si_mo.green/(height-1)
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  name si_norm
  tile_color 0xff
  selected true
  xpos 679
  ypos 495
 }
push $N159d8dd0
push $N159d8a60
 TimeOffset {
  time_offset {{parent.RefrenceFrameInput}}
  time ""
  name si_to
  tile_color 0xff
  selected true
  xpos 666
  ypos 269
 }
 Merge2 {
  inputs 2
  operation minus
  Achannels si_mo
  Bchannels si_mo
  output si_mo
  name si_calcdisp1
  tile_color 0xff
  selected true
  xpos 666
  ypos 309
 }
set N159d9b90 [stack 0]
 Dot {
  name Dot6
  tile_color 0xff
  selected true
  xpos 700
  ypos 439
 }
push $N159d9b90
push $N159d9140
 ShuffleCopy {
  inputs 2
  in si_mo
  alpha alpha2
  black red
  white green
  out2 si_mo
  name si_sh2
  tile_color 0xff
  selected true
  xpos 626
  ypos 358
 }
 VectorBlur {
  uv si_mo
  name si_mb
  tile_color 0xff
  selected true
  xpos 516
  ypos 352
  disable {{1-parent.enableMotionBlur}}
 }
 Input {
  inputs 0
  name InputMask
  tile_color 0xff
  selected true
  xpos 519
  ypos 141
  number 2
 }
 Dot {
  name Dot1
  tile_color 0xff
  selected true
  xpos 553
  ypos 190
 }
 Input {
  inputs 0
  name InputSource
  tile_color 0xff
  selected true
  xpos 410
  ypos 142
 }
 CameraTracker {
  inputs 2
  serializeKnob "22 serialization::archive 9 0 4 0 2 0 0 101 0 4 1 1
0 0 1 1 0.375 0 0 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
1 0 1 2 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
2 0 1 3 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
3 0 1 4 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
4 0 1 5 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
5 0 1 6 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
6 0 1 7 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
7 0 1 8 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
8 0 1 9 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
9 0 1 10 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
10 0 1 11 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
11 0 1 12 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
12 0 1 13 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
13 0 1 14 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
14 0 1 15 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
15 0 1 16 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
16 0 1 17 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
17 0 1 18 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
18 0 1 19 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
19 0 1 20 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
20 0 1 21 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
21 0 1 22 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
22 0 1 23 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
23 0 1 24 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
24 0 1 25 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
25 0 1 26 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
26 0 1 27 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
27 0 1 28 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
28 0 1 29 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
29 0 1 30 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
30 0 1 31 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
31 0 1 32 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
32 0 1 33 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
33 0 1 34 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
34 0 1 35 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
35 0 1 36 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
36 0 1 37 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
37 0 1 38 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
38 0 1 39 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
39 0 1 40 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
40 0 1 41 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
41 0 1 42 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
42 0 1 43 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
43 0 1 44 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
44 0 1 45 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
45 0 1 46 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
46 0 1 47 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
47 0 1 48 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
48 0 1 49 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
49 0 1 50 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
50 0 1 51 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
51 0 1 52 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
52 0 1 53 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
53 0 1 54 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
54 0 1 55 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
55 0 1 56 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
56 0 1 57 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
57 0 1 58 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
58 0 1 59 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
59 0 1 60 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
60 0 1 61 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
61 0 1 62 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
62 0 1 63 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
63 0 1 64 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
64 0 1 65 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
65 0 1 66 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
66 0 1 67 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
67 0 1 68 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
68 0 1 69 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
69 0 1 70 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
70 0 1 71 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
71 0 1 72 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
72 0 1 73 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
73 0 1 74 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
74 0 1 75 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
75 0 1 76 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
76 0 1 77 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
77 0 1 78 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
78 0 1 79 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
79 0 1 80 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
80 0 1 81 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
81 0 1 82 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
82 0 1 83 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
83 0 1 84 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
84 0 1 85 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
85 0 1 86 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
86 0 1 87 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
87 0 1 88 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
88 0 1 89 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
89 0 1 90 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
90 0 1 91 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
91 0 1 92 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
92 0 1 93 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
93 0 1 94 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
94 0 1 95 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
95 0 1 96 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
96 0 1 97 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
97 0 1 98 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
98 0 1 99 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
99 0 1 100 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 4
100 0 1 101 0.375 0 0 1919 1079 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 3 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 -1 0 1 0 4 1 2 0 4 0 4 2 2 0 4 1 4 3 2 0 4 2 4 4 2 0 4 3 4 5 2 0 4 4 4 6 2 0 4 5 4 7 2 0 4 6 4 8 2 0 4 7 4 9 2 0 4 8 4 10 2 0 4 9 4 11 2 0 4 10 4 12 2 0 4 11 4 13 2 0 4 12 4 14 2 0 4 13 4 15 2 0 4 14 4 16 2 0 4 15 4 17 2 0 4 16 4 18 2 0 4 17 4 19 2 0 4 18 4 20 2 0 4 19 4 21 2 0 4 20 4 22 2 0 4 21 4 23 2 0 4 22 4 24 2 0 4 23 4 25 2 0 4 24 4 26 2 0 4 25 4 27 2 0 4 26 4 28 2 0 4 27 4 29 2 0 4 28 4 30 2 0 4 29 4 31 2 0 4 30 4 32 2 0 4 31 4 33 2 0 4 32 4 34 2 0 4 33 4 35 2 0 4 34 4 36 2 0 4 35 4 37 2 0 4 36 4 38 2 0 4 37 4 39 2 0 4 38 4 40 2 0 4 39 4 41 2 0 4 40 4 42 2 0 4 41 4 43 2 0 4 42 4 44 2 0 4 43 4 45 2 0 4 44 4 46 2 0 4 45 4 47 2 0 4 46 4 48 2 0 4 47 4 49 2 0 4 48 4 50 2 0 4 49 4 51 2 0 4 50 4 52 2 0 4 51 4 53 2 0 4 52 4 54 2 0 4 53 4 55 2 0 4 54 4 56 2 0 4 55 4 57 2 0 4 56 4 58 2 0 4 57 4 59 2 0 4 58 4 60 2 0 4 59 4 61 2 0 4 60 4 62 2 0 4 61 4 63 2 0 4 62 4 64 2 0 4 63 4 65 2 0 4 64 4 66 2 0 4 65 4 67 2 0 4 66 4 68 2 0 4 67 4 69 2 0 4 68 4 70 2 0 4 69 4 71 2 0 4 70 4 72 2 0 4 71 4 73 2 0 4 72 4 74 2 0 4 73 4 75 2 0 4 74 4 76 2 0 4 75 4 77 2 0 4 76 4 78 2 0 4 77 4 79 2 0 4 78 4 80 2 0 4 79 4 81 2 0 4 80 4 82 2 0 4 81 4 83 2 0 4 82 4 84 2 0 4 83 4 85 2 0 4 84 4 86 2 0 4 85 4 87 2 0 4 86 4 88 2 0 4 87 4 89 2 0 4 88 4 90 2 0 4 89 4 91 2 0 4 90 4 92 2 0 4 91 4 93 2 0 4 92 4 94 2 0 4 93 4 95 2 0 4 94 4 96 2 0 4 95 4 97 2 0 4 96 4 98 2 0 4 97 4 99 2 0 4 98 4 100 1 0 4 99 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 101 0 0 0 0 0 1 0 0 0 1 0 2 0 2 0 2 0 1 0 3 0 3 0 2 0 2 0 4 0 4 0 2 0 3 0 5 0 5 0 2 0 4 0 6 0 6 0 2 0 5 0 7 0 7 0 2 0 6 0 8 0 8 0 2 0 7 0 9 0 9 0 2 0 8 0 10 0 10 0 2 0 9 0 11 0 11 0 2 0 10 0 12 0 12 0 2 0 11 0 13 0 13 0 2 0 12 0 14 0 14 0 2 0 13 0 15 0 15 0 2 0 14 0 16 0 16 0 2 0 15 0 17 0 17 0 2 0 16 0 18 0 18 0 2 0 17 0 19 0 19 0 2 0 18 0 20 0 20 0 2 0 19 0 21 0 21 0 2 0 20 0 22 0 22 0 2 0 21 0 23 0 23 0 2 0 22 0 24 0 24 0 2 0 23 0 25 0 25 0 2 0 24 0 26 0 26 0 2 0 25 0 27 0 27 0 2 0 26 0 28 0 28 0 2 0 27 0 29 0 29 0 2 0 28 0 30 0 30 0 2 0 29 0 31 0 31 0 2 0 30 0 32 0 32 0 2 0 31 0 33 0 33 0 2 0 32 0 34 0 34 0 2 0 33 0 35 0 35 0 2 0 34 0 36 0 36 0 2 0 35 0 37 0 37 0 2 0 36 0 38 0 38 0 2 0 37 0 39 0 39 0 2 0 38 0 40 0 40 0 2 0 39 0 41 0 41 0 2 0 40 0 42 0 42 0 2 0 41 0 43 0 43 0 2 0 42 0 44 0 44 0 2 0 43 0 45 0 45 0 2 0 44 0 46 0 46 0 2 0 45 0 47 0 47 0 2 0 46 0 48 0 48 0 2 0 47 0 49 0 49 0 2 0 48 0 50 0 50 0 2 0 49 0 51 0 51 0 2 0 50 0 52 0 52 0 2 0 51 0 53 0 53 0 2 0 52 0 54 0 54 0 2 0 53 0 55 0 55 0 2 0 54 0 56 0 56 0 2 0 55 0 57 0 57 0 2 0 56 0 58 0 58 0 2 0 57 0 59 0 59 0 2 0 58 0 60 0 60 0 2 0 59 0 61 0 61 0 2 0 60 0 62 0 62 0 2 0 61 0 63 0 63 0 2 0 62 0 64 0 64 0 2 0 63 0 65 0 65 0 2 0 64 0 66 0 66 0 2 0 65 0 67 0 67 0 2 0 66 0 68 0 68 0 2 0 67 0 69 0 69 0 2 0 68 0 70 0 70 0 2 0 69 0 71 0 71 0 2 0 70 0 72 0 72 0 2 0 71 0 73 0 73 0 2 0 72 0 74 0 74 0 2 0 73 0 75 0 75 0 2 0 74 0 76 0 76 0 2 0 75 0 77 0 77 0 2 0 76 0 78 0 78 0 2 0 77 0 79 0 79 0 2 0 78 0 80 0 80 0 2 0 79 0 81 0 81 0 2 0 80 0 82 0 82 0 2 0 81 0 83 0 83 0 2 0 82 0 84 0 84 0 2 0 83 0 85 0 85 0 2 0 84 0 86 0 86 0 2 0 85 0 87 0 87 0 2 0 86 0 88 0 88 0 2 0 87 0 89 0 89 0 2 0 88 0 90 0 90 0 2 0 89 0 91 0 91 0 2 0 90 0 92 0 92 0 2 0 91 0 93 0 93 0 2 0 92 0 94 0 94 0 2 0 93 0 95 0 95 0 2 0 94 0 96 0 96 0 2 0 95 0 97 0 97 0 2 0 96 0 98 0 98 0 2 0 97 0 99 0 99 0 2 0 98 0 100 0 100 0 2 0 99 0 101 0 101 0 1 0 100 0 0 0 0 0"
  trackDisplay "Points only"
  ignore "Mask Inverted Alpha"
  trackRange Custom
  trackStart {{parent.InputFrom}}
  trackStop {{parent.InputTo+1}}
  referenceFrames {{curve x1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101}}
  filenameSalt 9831
  userTrackViews {left right}
  trackCurves {"num tracks" {curve}
    "track len - min" {curve}
    "track len - avg" {curve}
    "track len - max" {curve}
    "Min Length" {curve x1 0 x101 0}
    "Solve Error" {curve x1 0 x101 0}
    "error - min" {curve}
    "error - rms" {curve}
    "error - track" {curve}
    "error - max" {curve}
    "Max Track Error" {curve x1 0 x101 0}
    "Max Error" {curve x1 0 x101 0}}
  numberFeatures 200
  featureThreshold 0.0001
  featureSeparation 9
  matchThreshold 0.041
  smoothnessThreshold 0.11
  name si_ct
  tile_color 0xff
  selected true
  xpos 410
  ypos 187
 }
 Shuffle {
  red black
  green black
  blue black
  alpha black
  name si_switch
  tile_color 0xff
  selected true
  xpos 410
  ypos 274
  disable {{1-parent.HideSource}}
 }
 Merge2 {
  inputs 2
  name si_mrg
  tile_color 0xff
  selected true
  xpos 410
  ypos 358
 }
add_layer {si_mov si_mov.red si_mov.green si_mov.blue si_mov.alpha}
 ShuffleCopy {
  inputs 2
  in si_mo
  alpha alpha2
  black red
  white green
  red2 black
  green2 black
  out2 si_mov
  name si_mrg_mv
  tile_color 0xff
  selected true
  xpos 410
  ypos 436
  disable {{1-parent.displayMotion}}
 }
 ShuffleCopy {
  inputs 2
  in si_trans
  alpha alpha2
  black red
  white green
  red2 black
  green2 black
  out2 si_trans
  name si_mrg_st
  tile_color 0xff
  selected true
  xpos 410
  ypos 495
  disable {{1-parent.displayDiffrence}}
 }
 Output {
  name Output1
  tile_color 0xff
  selected true
  xpos 410
  ypos 540
 }
 StickyNote {
  inputs 0
  name StickyNote1
  tile_color 0xff
  label "StickIT debug instructions.\n\n\n\nA: Make sure that there is not too much jitter in any of the features\n\nB: Currently Stickit does not support empty frames, all frames within\n    the region must have atleast 3 features.\n\nC: If the warp get crossed, go into the tracker (si_ct) and delete points \n    from the reference frame.\n\n\n\n\n\n\n\n                                                                                                        "
  note_font_size 300
  xpos 5602
  ypos -1393
 }
end_group
