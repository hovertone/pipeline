# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'X:\app\win\Pipeline\uis222\scriptsWindow02.ui'
#
# Created: Wed Jan 23 20:13:28 2019
#      by: pyside-uic 0.2.15 running on PySide 1.2.4
#
# WARNING! All changes made in this file will be lost!
try:
    from PySide2 import QtGui
    from PySide2 import QtCore
    from PySide2 import QtWidgets
except:
    from PySide import QtGui
    from PySide import QtCore

    
class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(578, 240)
        self.viewerGroup = QtWidgets.QGroupBox(Form)
        self.viewerGroup.setGeometry(QtCore.QRect(10, 10, 181, 111))
        self.viewerGroup.setAlignment(QtCore.Qt.AlignCenter)
        self.viewerGroup.setObjectName("viewerGroup")
        self.layoutWidget = QtWidgets.QWidget(self.viewerGroup)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 20, 161, 83))
        self.layoutWidget.setObjectName("layoutWidget")
        self.viewerLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.viewerLayout.setContentsMargins(0, 0, 0, 0)
        self.viewerLayout.setObjectName("viewerLayout")
        self.flopflop = QtWidgets.QPushButton(self.layoutWidget)
        self.flopflop.setObjectName("flopflop")
        self.viewerLayout.addWidget(self.flopflop)
        self.autocrop = QtWidgets.QPushButton(self.layoutWidget)
        self.autocrop.setObjectName("autocrop")
        self.viewerLayout.addWidget(self.autocrop)
        self.viewerToRGBA = QtWidgets.QPushButton(self.layoutWidget)
        self.viewerToRGBA.setObjectName("viewerToRGBA")
        self.viewerLayout.addWidget(self.viewerToRGBA)
        self.nodegraphGroup = QtWidgets.QGroupBox(Form)
        self.nodegraphGroup.setGeometry(QtCore.QRect(200, 10, 161, 171))
        self.nodegraphGroup.setAlignment(QtCore.Qt.AlignCenter)
        self.nodegraphGroup.setObjectName("nodegraphGroup")
        self.layoutWidget1 = QtWidgets.QWidget(self.nodegraphGroup)
        self.layoutWidget1.setGeometry(QtCore.QRect(10, 20, 141, 141))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.nodegraphLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.nodegraphLayout.setContentsMargins(0, 0, 0, 0)
        self.nodegraphLayout.setObjectName("nodegraphLayout")
        self.lineupHorizontally = QtWidgets.QPushButton(self.layoutWidget1)
        self.lineupHorizontally.setObjectName("lineupHorizontally")
        self.nodegraphLayout.addWidget(self.lineupHorizontally)
        self.lineupVertically = QtWidgets.QPushButton(self.layoutWidget1)
        self.lineupVertically.setObjectName("lineupVertically")
        self.nodegraphLayout.addWidget(self.lineupVertically)
        self.toggleViewerInputs = QtWidgets.QPushButton(self.layoutWidget1)
        self.toggleViewerInputs.setObjectName("toggleViewerInputs")
        self.nodegraphLayout.addWidget(self.toggleViewerInputs)
        self.mirrorNodes = QtWidgets.QPushButton(self.layoutWidget1)
        self.mirrorNodes.setObjectName("mirrorNodes")
        self.nodegraphLayout.addWidget(self.mirrorNodes)
        self.w_scaletree = QtWidgets.QPushButton(self.layoutWidget1)
        self.w_scaletree.setObjectName("w_scaletree")
        self.nodegraphLayout.addWidget(self.w_scaletree)
        self.writeGroup = QtWidgets.QGroupBox(Form)
        self.writeGroup.setGeometry(QtCore.QRect(10, 120, 181, 91))
        self.writeGroup.setAlignment(QtCore.Qt.AlignCenter)
        self.writeGroup.setObjectName("writeGroup")
        self.layoutWidget2 = QtWidgets.QWidget(self.writeGroup)
        self.layoutWidget2.setGeometry(QtCore.QRect(10, 20, 161, 54))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.writeLayout = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.writeLayout.setContentsMargins(0, 0, 0, 0)
        self.writeLayout.setObjectName("writeLayout")
        self.deleteWriteFiles = QtWidgets.QPushButton(self.layoutWidget2)
        self.deleteWriteFiles.setObjectName("deleteWriteFiles")
        self.writeLayout.addWidget(self.deleteWriteFiles)
        self.rerenderMissingFrames = QtWidgets.QPushButton(self.layoutWidget2)
        self.rerenderMissingFrames.setObjectName("rerenderMissingFrames")
        self.writeLayout.addWidget(self.rerenderMissingFrames)
        self.otherGroup = QtWidgets.QGroupBox(Form)
        self.otherGroup.setGeometry(QtCore.QRect(370, 10, 201, 221))
        self.otherGroup.setAlignment(QtCore.Qt.AlignCenter)
        self.otherGroup.setObjectName("otherGroup")
        self.layoutWidget3 = QtWidgets.QWidget(self.otherGroup)
        self.layoutWidget3.setGeometry(QtCore.QRect(10, 20, 181, 191))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.otherLayout = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.otherLayout.setContentsMargins(0, 0, 0, 0)
        self.otherLayout.setObjectName("otherLayout")
        self.glezin = QtWidgets.QPushButton(self.layoutWidget3)
        self.glezin.setObjectName("glezin")
        self.otherLayout.addWidget(self.glezin)
        self.batchRenamer = QtWidgets.QPushButton(self.layoutWidget3)
        self.batchRenamer.setObjectName("batchRenamer")
        self.otherLayout.addWidget(self.batchRenamer)
        self.deepDefocusSlicer = QtWidgets.QPushButton(self.layoutWidget3)
        self.deepDefocusSlicer.setObjectName("deepDefocusSlicer")
        self.otherLayout.addWidget(self.deepDefocusSlicer)
        self.normalize = QtWidgets.QPushButton(self.layoutWidget3)
        self.normalize.setObjectName("normalize")
        self.otherLayout.addWidget(self.normalize)
        self.copyTrackingDataToRoto = QtWidgets.QPushButton(self.layoutWidget3)
        self.copyTrackingDataToRoto.setObjectName("copyTrackingDataToRoto")
        self.otherLayout.addWidget(self.copyTrackingDataToRoto)
        self.cameraFromExr = QtWidgets.QPushButton(self.layoutWidget3)
        self.cameraFromExr.setObjectName("cameraFromExr")
        self.otherLayout.addWidget(self.cameraFromExr)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        Form.setWindowTitle("Form")
        self.viewerGroup.setTitle("Viewer Stuff")
        self.flopflop.setToolTip("<html><head/><body><p>Зеркалит картинку по горизонтали. </p></body></html>")
        self.flopflop.setText("FLOP FLOP")
        self.flopflop.setProperty("script", "LH.mirrorViewer()")
        self.flopflop.setProperty("name", "flopflop")
        self.flopflop.setProperty("gifname", "giphy")
        self.autocrop.setToolTip("<html><head/><body><p>Создает <span style=\" font-weight:600;\">CROP </span>ноду, которой оставляет только <span style=\" text-decoration: underline;\">нужные</span> пиксели.</p><p>Перед выполнением нужно заселектить ноду.</p><p>Сканирует по альфе.</p></body></html>")
        self.autocrop.setText("AUTOCROP")
        self.autocrop.setProperty("script", "frames = nuke.getInput(\'Set Frame Range\', \'%s-%s\' % (int(nuke.root()[\'first_frame\'].value()), int(nuke.root()[\'last_frame\'].value()))).split(\'-\')\n"
"nukescripts.autocrop(first = frames[0], last = frames[1], layer = \'alpha\')")
        self.autocrop.setProperty("name", "autocrop")
        self.autocrop.setProperty("gifname", "giphy")
        self.viewerToRGBA.setToolTip("<html><head/><body><p>Пересчелкивает вьювер в <span style=\" font-weight:600;\">rgba</span></p></body></html>")
        self.viewerToRGBA.setText("Viewer to RGBA")
        self.viewerToRGBA.setProperty("script", "v = nuke.activeViewer().node().name()\n"
"nuke.toNode(v)[\'channels\'].setValue(\'rgba\')")
        self.viewerToRGBA.setProperty("name", "viewerToRGBA")
        self.viewerToRGBA.setProperty("gifname", "giphy")
        self.nodegraphGroup.setTitle("NodeGraph")
        self.lineupHorizontally.setToolTip("<html><head/><body><p>Выставляет выделенные ноды <span style=\" font-weight:600;\">горизонтально</span>.</p></body></html>")
        self.lineupHorizontally.setText("Lineup Horizontally")
        self.lineupHorizontally.setProperty("script", "scripts.lineupNodes()")
        self.lineupHorizontally.setProperty("name", "lineupHorizontally")
        self.lineupHorizontally.setProperty("gifname", "giphy")
        self.lineupVertically.setToolTip("<html><head/><body><p>Выставляет выделенные ноды <span style=\" font-weight:600;\">вертикально</span>.</p></body></html>")
        self.lineupVertically.setText("Lineup Vertically")
        self.lineupVertically.setProperty("script", "scripts.linedownNodes()")
        self.lineupVertically.setProperty("name", "lineupVertically")
        self.lineupVertically.setProperty("gifname", "giphy")
        self.toggleViewerInputs.setToolTip("<html><head/><body><p>Прячет все инпут коннекшены всех нод вьюверов в скрипте.</p></body></html>")
        self.toggleViewerInputs.setText("Toggle viewer inputs")
        self.toggleViewerInputs.setProperty("script", "LH.toggleViewerInput()")
        self.toggleViewerInputs.setProperty("name", "toggleViewerInputs")
        self.toggleViewerInputs.setProperty("gifname", "giphy")
        self.mirrorNodes.setToolTip("<html><head/><body><p>Зеркалит расположение выделенных нод по горизонтали.</p></body></html>")
        self.mirrorNodes.setText("Mirror nodes")
        self.mirrorNodes.setProperty("script", "mirrorNodes.mirrorNodes()")
        self.mirrorNodes.setProperty("name", "mirronNodes")
        self.mirrorNodes.setProperty("gifname", "giphy")
        self.w_scaletree.setToolTip("<html><head/><body><p>Скейлер расположения выделеных нод.</p></body></html>")
        self.w_scaletree.setText("W_ScaleTree")
        self.w_scaletree.setProperty("script", "W_scaleTree.scaleTreeFloatingPanel()")
        self.w_scaletree.setProperty("name", "w_scaleTree")
        self.w_scaletree.setProperty("gifname", "giphy")
        self.writeGroup.setTitle("Write")
        self.deleteWriteFiles.setToolTip("<html><head/><body><p>Удаляет файлы из папки, которая указана в пути <span style=\" font-weight:600;\">write</span> ноды.<br/>Перед выполнением нужно выделить <span style=\" font-weight:600;\">write</span> ноду.</p></body></html>")
        self.deleteWriteFiles.setText("Delete write files")
        self.deleteWriteFiles.setProperty("script", "deleteFilesFromWrite.deleteFilesFromWritePath(nuke.selectedNode())")
        self.deleteWriteFiles.setProperty("name", "deleteWriteFiles")
        self.deleteWriteFiles.setProperty("gifname", "giphy")
        self.rerenderMissingFrames.setToolTip("<html><head/><body><p>Дорендеривает недостающие кадры из секвенции <span style=\" font-weight:600;\">write</span> ноды.<br/>Перед выполнением выделить <span style=\" font-weight:600;\">write</span> ноду.</p></body></html>")
        self.rerenderMissingFrames.setText("Rerender missing frames")
        self.rerenderMissingFrames.setProperty("script", "rerenderMissingFrames.rerenderMissedFrame()")
        self.rerenderMissingFrames.setProperty("name", "rerenderMissingFrames")
        self.rerenderMissingFrames.setProperty("gifname", "giphy")
        self.otherGroup.setTitle("Other")
        self.glezin.setToolTip("<html><head/><body><p>Удобный сплиттер <span style=\" font-weight:600;\">EXR</span>\'ов. <br/>Перед запуском выделить <span style=\" font-weight:600;\">read </span>ноду.</p></body></html>")
        self.glezin.setText("Glezin Split EXR")
        self.glezin.setProperty("script", "split_layers.main()")
        self.glezin.setProperty("name", "glezin")
        self.glezin.setProperty("gifname", "giphy")
        self.batchRenamer.setToolTip("<html><head/><body><p>Переименовывает секвенцию из <span style=\" font-weight:600;\">read</span> ноды.<br/>Перед испольхованием выделить <span style=\" font-weight:600;\">read</span> ноду.</p></body></html>")
        self.batchRenamer.setText("Batch renamer")
        self.batchRenamer.setProperty("script", "batchrenamer.main()")
        self.batchRenamer.setProperty("name", "batchRenamer")
        self.batchRenamer.setProperty("gifname", "giphy")
        self.deepDefocusSlicer.setToolTip("<html><head/><body><p>Разрезает <span style=\" font-weight:600;\">deep exr</span> по глубине от камеры на разные плейны и добавляет дефокус на каждый план отдельно.<br/>Перед запуском требуется выделать ноду с <span style=\" font-weight:600;\">deep</span> потоком.</p></body></html>")
        self.deepDefocusSlicer.setText("Deep Defocus Slicer")
        self.deepDefocusSlicer.setProperty("script", "deepDefocusSlicer.deepDefocus()")
        self.deepDefocusSlicer.setProperty("name", "deepDefocusSlicer")
        self.deepDefocusSlicer.setProperty("gifname", "giphy")
        self.normalize.setToolTip("<html><head/><body><p>Нормализирует величины.</p></body></html>")
        self.normalize.setText("Normalize")
        self.normalize.setProperty("script", "LH.normalizeDepth()")
        self.normalize.setProperty("name", "normalize")
        self.normalize.setProperty("gifname", "giphy")
        self.copyTrackingDataToRoto.setToolTip("<html><head/><body><p>Перебрасывает треккинг данные в рут рото(ротопеинт) ноды.<br/>Перед выделением нужны выделить:<br/>1) Tracker<br/>2) Roto<br/>3) Root поле в ноде roto.</p></body></html>")
        self.copyTrackingDataToRoto.setText("Copy Tracking data to Roto")
        self.copyTrackingDataToRoto.setProperty("script", "Points3DToTracker.copyTrackingToRoto(True)")
        self.copyTrackingDataToRoto.setProperty("name", "copyTrackingToRoto")
        self.copyTrackingDataToRoto.setProperty("gifname", "giphy")
        self.cameraFromExr.setToolTip("<html><head/><body><p>Перебрасывает треккинг данные в рут рото(ротопеинт) ноды.<br/>Перед выделением нужны выделить:<br/>1) Tracker<br/>2) Roto<br/>3) Root поле в ноде roto.</p></body></html>")
        self.cameraFromExr.setText("Camera From EXR")
        self.cameraFromExr.setProperty("script", "ExportAnimationFromEXR.CamExp()")
        self.cameraFromExr.setProperty("name", "camFromExr")
        self.cameraFromExr.setProperty("gifname", "giphy")

